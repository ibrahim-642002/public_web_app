# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PV1zaJRt-fL5UmksKJVOIddwEJBZcbmU
"""
#!npm install -g localtunnel

# Commented out IPython magic to ensure Python compatibility.
 %%writefile app.py
 import streamlit as st
 from transformers import BlipProcessor, BlipForConditionalGeneration
 from PIL import Image
 import requests
 import torch
 import base64
# 
# # Streamlit front page setup
 st.set_page_config(page_title="Image to Text Generation for Kids", page_icon=":camera:", layout="wide")
# 
# # Function to load image from URL or local path
 def load_image(image_path_or_url):
     if image_path_or_url.startswith('http'):
         image = Image.open(requests.get(image_path_or_url, stream=True).raw)
     else:
         image = Image.open(image_path_or_url)
     return image
# 
# # Function to set background image using base64 encoding
 def set_bg_image(image_file):
     with open(image_file, "rb") as f:
         encoded_string = base64.b64encode(f.read()).decode()
     st.markdown(
         f"""
         <style>
         .stApp {{
             background-image: url(data:image/jpg;base64,{encoded_string});
             background-size: cover;
             background-repeat: no-repeat;
             background-attachment: fixed;
             background-position: center;
         }}
         </style>
         """,
         unsafe_allow_html=True
     )
 
# # Set the background image
 set_bg_image('/content/pngtree-kids-background-picture-image_693502.jpg')  # replace 'background.jpg' with your image file name
 
# # Set custom CSS for a better layout
 page_css = '''
 <style>
 .title {
 font-family: 'Comic Sans MS', cursive, sans-serif;
 color: #ff6347;
 text-align: center;
 margin-top: 30px;
 }
 .uploaded-image {
 border: 5px solid #ff6347;
 border-radius: 10px;
 margin-top: 20px;
 }
 .caption {
 font-family: 'Comic Sans MS', cursive, sans-serif;
 color: #008080;
 text-align: center;
 margin-top: 20px;
 font-size: 1.5em;
 }
 .instructions {
 font-family: 'Comic Sans MS', cursive, sans-serif;
 color: #00008B;
 font-size: 1.2em;
 margin-top: 10px;
 }
 .sidebar {
 background-color: #f0f8ff;
 padding: 10px;
 border-radius: 10px;
 }
 </style>
 '''
 st.markdown(page_css, unsafe_allow_html=True)
 
 st.markdown('<h1 class="title">Image to Text Generation for Kids</h1>', unsafe_allow_html=True)
 
# # Sidebar with instructions and options
 st.sidebar.markdown('<div class="sidebar">', unsafe_allow_html=True)
 st.sidebar.markdown('<p class="instructions">üìö Instructions:</p>', unsafe_allow_html=True)
 st.sidebar.markdown('1. üì∑ Upload an image or provide an image URL.')
 st.sidebar.markdown('2. ‚è≥ Wait for the caption to be generated.')
 st.sidebar.markdown('3. üéâ Enjoy the generated caption!')
 st.sidebar.markdown('</div>', unsafe_allow_html=True)
 
 option = st.sidebar.selectbox("Choose an option:", ["Upload an image", "Enter an image URL"])
 
# # Load the processor and the model
 st.sidebar.markdown('Loading model...')
 processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
 model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")
 st.sidebar.markdown('Model loaded.')
 
# # Upload or URL input
 if option == "Upload an image":
     uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
 else:
     url = st.text_input("Enter image URL:")
 
 if (option == "Upload an image" and uploaded_file is not None) or (option == "Enter an image URL" and url):
     image = None
     if uploaded_file is not None:
         image = Image.open(uploaded_file)
     else:
         image = load_image(url)
 
     st.image(image, caption='Uploaded Image.', use_column_width=True, output_format="auto")
 
     # Process the image
     with st.spinner('Generating caption...'):
         inputs = processor(images=image, return_tensors="pt")
 
         # Perform inference
         with torch.no_grad():
             outputs = model.generate(**inputs)
 
         # Decode the generated caption
         caption = processor.decode(outputs[0], skip_special_tokens=True)
 
     st.markdown(f'<p class="caption">Generated Caption: {caption}</p>', unsafe_allow_html=True)
 else:
     st.markdown('<p class="instructions">Please upload an image or provide an image URL to generate a caption.</p>', unsafe_allow_html=True)


#! wget -q -O - ipv4.icanhazip.com

#!streamlit run app.py & npx localtunnel --port 8501
